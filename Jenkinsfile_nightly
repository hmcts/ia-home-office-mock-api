#!groovy

properties([
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 8 * * 1-5')]),
  parameters([
    string(name: 'URL_TO_TEST',
      defaultValue: 'http://ia-home-office-mock-api-aat.service.core-compute-aat.internal',
      description: 'The URL you want to run these tests against'),
    string(name: 'SecurityRules',
      defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
      description: 'The URL you want to run these tests against'),
  ])
])


@Library("Infrastructure")
import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "ia"
def component = "home-office-mock-api"

def secrets = [
    'ia-${env}': [
        secret('s2s-microservice', 'IA_S2S_MICROSERVICE'),
        secret('app-insights-connection-string', 'app-insights-connection-string')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

GradleBuilder builder = new GradleBuilder(this, product)

withNightlyPipeline(type, product, component) {
    env.TEST_URL = params.URL_TO_TEST
    env.Rules = params.SecurityRules
    env.SecurityRules = params.SecurityRules

    loadVaultSecrets(secrets)

    enableSecurityScan()
    enableFullFunctionalTest()
//    enableFortifyScan()
    enableSlackNotifications('#ia-tech')

    afterAlways('DependencyCheckNightly') {
      publishHTML([
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports",
        reportFiles          : 'dependency-check-report.html',
        reportName           : 'IAC Home Office Mock Api Dependency Check Report'
      ])
    }

    after('fortify-scan') {
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }

    before('fullFunctionalTest') {
      try {
        builder.gradle('test')
        builder.gradle('integration')
        builder.gradle('smoke')
      } finally {
        junit '**/test-results/**/*.xml'
      }
    }

    afterAlways('fullFunctionalTest') {
      publishHTML([
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/tests/functional",
        reportFiles          : 'index.html',
        reportName           : 'Functional Test Report'
      ])
      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/tests/test",
        reportFiles          : "index.html",
        reportName           : "Unit Test Report"
      ]
      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/tests/smoke",
        reportFiles          : "index.html",
        reportName           : "Smoke Test Report"
      ]
      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/tests/integration",
        reportFiles          : "index.html",
        reportName           : "Integration Test Report"
      ]

      steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/build/reports/**/*'
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/**/*'
    }
}
