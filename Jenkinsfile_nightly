#!groovy

properties([
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 8 * * 1-5')]),
  parameters([
    string(name: 'URL_TO_TEST',
      defaultValue: 'http://ia-home-office-mock-api-aat.service.core-compute-aat.internal',
      description: 'The URL you want to run these tests against'),
    string(name: 'SecurityRules',
      defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
      description: 'The URL you want to run these tests against'),
    booleanParam(name: 'skipSmokeTest', defaultValue: false, description: 'Tick the checkbox to skip Smoke Test stage'),
    booleanParam(name: 'skipUnitTests', defaultValue: false, description: 'Tick the checkbox to skip Unit Tests stage'),
    booleanParam(name: 'skipIntegrationTests', defaultValue: false, description: 'Tick the checkbox to skip Integration Tests stage'),
    booleanParam(name: 'skipSecurityScan', defaultValue: false, description: 'Tick the checkbox to skip Security Scan stage'),
    booleanParam(name: 'skipFullFunctionalTests', defaultValue: false, description: 'Tick the checkbox to skip Full Functional Tests stage'),
  ])
])


@Library("Infrastructure")
import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "ia"
def component = "home-office-mock-api"

def secrets = [
  'ia-${env}': [
    secret('s2s-microservice', 'IA_S2S_MICROSERVICE'),
    secret('app-insights-connection-string', 'app-insights-connection-string')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

GradleBuilder builder = new GradleBuilder(this, product)

withNightlyPipeline(type, product, component) {
  env.TEST_URL = params.URL_TO_TEST
  env.Rules = params.SecurityRules
  env.SecurityRules = params.SecurityRules

  loadVaultSecrets(secrets)

  if (!params.skipSecurityScan) {
    enableSecurityScan()
  }
  if (!params.skipFullFunctionalTests) {
    enableFullFunctionalTest()
  }
  enableSlackNotifications('#ia-tech')

  afterAlways('build') {
    if (!params.skipSmokeTest) {
      stage('Smoke Test') {
        try {
          builder.gradle("smoke")
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable")
        } finally {
          publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/smoke",
            reportFiles          : "index.html",
            reportName           : "Smoke Test Report"
          ]
        }
      }
    }
    if (!params.skipUnitTests) {
      stage('Unit Tests') {
        try {
          builder.gradle('test')
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable")
        } finally {
          publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "Unit Test Report"
          ]
        }
      }
    }
    if (!params.skipIntegrationTests) {
      stage('Integration Tests') {
        try {
          builder.gradle('integration')
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable")
        } finally {
          publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/integration",
            reportFiles          : "index.html",
            reportName           : "Integration Test Report"
          ]
        }
      }
    }
  }

  afterAlways('DependencyCheckNightly') {
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports",
      reportFiles          : 'dependency-check-report.html',
      reportName           : 'Dependency Check Report'
    ])
  }

  after('fortify-scan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
  }

  afterAlways('securityScan') {
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-output",
      reportFiles          : 'api-report.html',
      reportName           : 'Security Scan Report'
    ])
  }

  afterAlways('fullFunctionalTest') {
    publishHTML([
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/functional",
      reportFiles          : 'index.html',
      reportName           : 'Functional Test Report'
    ])

    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/build/reports/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/**/*'
  }
}
