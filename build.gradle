plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.springframework.boot' version '2.3.9.RELEASE'
  id 'org.owasp.dependencycheck' version '6.0.2'
  id 'com.github.ben-manes.versions' version '0.28.0'
  id 'org.sonarqube' version '3.3'
  id 'maven-publish'
  id "org.openapi.generator" version "4.3.0"
}

apply plugin: 'java'
apply plugin: 'org.openapi.generator'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

def apiGenerateBuildDir = "$buildDir/apidocs".toString()

openApiGenerate {
  generatorName = "spring"
  inputSpec = "$projectDir/appealsAPIv1d.yaml".toString()
  outputDir = apiGenerateBuildDir
  apiPackage = "uk.gov.hmcts.reform.iahomeofficemockapi.generated.infrastructure.api"
  invokerPackage = "uk.gov.hmcts.reform.iahomeofficemockapi.generated.infrastructure.api.invoker"
  modelPackage = "uk.gov.hmcts.reform.iahomeofficemockapi.generated.domain.entities"
  configOptions = [
          dateLibrary: "java8",
          dateLibrary: "java8",
          serializationLibrary: "jackson"
  ]
}

task copyApiDocs(type: Copy) {

  def srcPath = "$apiGenerateBuildDir/src/main/java"
  def targetPath = "$rootDir/src/main/java"

  // copy generated classes
  from(srcPath)
  into(targetPath)
}

tasks.withType(Copy) {
  dependsOn tasks.openApiGenerate
}


tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
  options.encoding = 'UTF-8'
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  useJUnitPlatform()
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 100000
  toolVersion = '8.40'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.18.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "IA :: Immigration & Asylum Home Office Mock API"
    property "sonar.projectKey", "IAHOMEOFFICEMOCKAPI"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/iahomeofficemockapi/infrastructure/config/**," +
            "src/main/java/uk/gov/hmcts/reform/iahomeofficemockapi/generated/infrastructure/api/**," +
            "src/main/java/uk/gov/hmcts/reform/iahomeofficemockapi/generated/domain/entities/**," +
            "src/main/java/org/openapitools/configuration/**"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  configurations.collect { it.name }.findAll {
    it.startsWith('org.openapitools.configuration') ||  it.startsWith('uk.gov.hmcts.reform.iahomeofficemockapi.generated')}

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '30.0-jre') {
      entry 'guava'
    }
    dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.43') {
      entry 'tomcat-embed-core'
      entry 'tomcat-embed-el'
      entry 'tomcat-embed-websocket'
    }
  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
}

def versions = [
  junit           : '5.6.2',
  junitPlatform   : '1.6.2',
  reformLogging   : '5.1.1',
  springBoot      : '2.3.9.RELEASE',
  springfoxSwagger: '2.9.2',
  openapiGenerator: '4.2.3'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.2.RELEASE'
  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.0.4'
  compile group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.3'
  // CVE-2020-9488
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.13.2'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.2'

  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
  implementation group: 'javax.xml.bind', name:'jaxb-api', version:'2.2.11'
  implementation group:'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.12.0'
  implementation group: 'org.openapitools', name: 'jackson-databind-nullable', version: '0.1.0'
  implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
  implementation group: 'io.rest-assured', name: 'rest-assured', version: '3.3.0'


  implementation group: 'org.webjars.bower', name: 'jquery', version: '3.6.0'

  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

  implementation group: 'org.apache.sling', name: 'org.apache.sling.api', version: '2.23.0'

  testImplementation libraries.junit5
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.iahomeofficemockapi.generated.infrastructure.api.invoker.OpenAPI2SpringBoot'
def jarName = 'ia-home-office-mock-api.jar'

bootJar {
  getArchiveFileName().set(provider {
    'ia-home-office-mock-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

